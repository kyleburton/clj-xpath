h1. clj-xpath : clj-xpath-1.3 Branch

This branch is Clojure 1.3 compatible.

Note: This library has two main branches, currently the master branch (this branch) is for Clojure 1.3 compatability.  The clj-xpath-1.2 branch is for Clojure 1.2 compatability.  Both versions of the library are available on Clojars.

h2. Description

Simplified XPath Library for Clojure.  XML Parsers and an XPath implementation now comes with Java 6, though using the api directly can be verbose and confusing.  This library provides a thin layer around basic parsing and XPath interaction for common use cases.  I have personally found the ability to interactively tweak my xpath expressions to be a great productivity boost - even using this library only for that has helped me in my learning of and using xpath.  I hope you find it useful and would love to hear your feedback and suggestions.



h2. Trying It Out

The build (see 'Building' for instructions on building this software) creates a REPL script (<code>bin/repl</code>) that you can use to quickly try the library out:

<pre><code>
kyle@indigo64 ~/personal/projects/clj-xpath[master]$ bin/repl
Clojure 1.0.0
user=> (use 'clj-xpath.core)
nil
user=> (use 'clojure.contrib.duck-streams)
nil
user=> (def xdoc (slurp* "http://github.com/kyleburton/clj-xpath/raw/master/pom.xml"))
#'user/xdoc
user=> ($x:tag "/*" xdoc)
:project
user=> ($x:text* "/project/developers/developer/name" xdoc)
("Kyle Burton")
user=> (doseq [node ($x "/project/dependencies/dependency" xdoc)]
  (prn (format "%s %s %s"
               ($x:text "./groupId"    node)
               ($x:text "./artifactId" node)
               ($x:text "./version"    node))))
"org.clojure clojure 1.0.0"
"org.clojure clojure-contrib 1.0.0"
"commons-math commons-math 1.2"
"log4j log4j 1.2.14"
"commons-logging commons-logging 1.1.1"
"junit junit 3.8.1"
nil
user=> (System/exit 0)
kyle@indigo64 ~/personal/projects/clj-xpath[master]$
</code></pre>

h2. Usage

The main functions in the library are <code>$x</code> and those named with a prefix of <code>$x:</code> (eg: <code>$x:text</code>).  The rationale for choosing <code>$x</code> as a name was based on the FireBug xpath function and it being a short and uncommon name.  These xpath functions all take the xpath expression to be executed and an XML document.  They attempt to be flexible with respect to the form of the XML document may represent.  If it is a string it is treated as XML, if a byte array it is used directly, if already a Document or Node (from org.w3c.dom) they are used as-is.

There are two forms of many of the functions, with one set ending with a star '*'.  The non-suffixed forms will perform their operation on a single result node, raising an exception if there isn't exactly one result from applying the xpath expression to the XML document.  The '*' suffixed forms return all of the matched nodes for further processing.

<code>$x</code> function returns a map containing the XML tag (as a symbol), dom Node, the text (as a string), and a map of the attributes where the keys have been converted into symbols and the values remain Strings.

<pre><code>
(ns example
  (use [clj-xpath.core :only [$x $x:tag $x:text $x:attrs $x:attrs* $x:node]]))


(def *some-xml*
     "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<books>
  <book title=\"Some Guide To XML\">
    <author>
      <name>P.T. Xarnum</name>
      <email>pt@x.m.l</email>
    </author>
    <description>
      Simply the most comprehensive XML Book on the market today.
    </description>
  </book>
  <book title=\"Some Guide To Functional Programming\">
    <author>
      <name>S. Hawking</name>
      <email>universe@cambridge.ed.u</email>
    </author>
    <description>
      This book is too smart for you, try 'Head first Quantum Mechanics for Dummies' instead.
    </description>
  </book>
</books>")


;; get the top level tag:
(prn ($x:tag "/*" *some-xml*))
;; :books

;; find all :book nodes, pull the title from the attributes:
(prn (map #(-> % :attrs :title) ($x "//book" *some-xml*)))
;; ("Some Guide To XML" "Some Guide To Functional Programming")

;; same result using the $x:attrs* function:
(prn ($x:attrs* "//book" *some-xml* :title))
;; ("Some Guide To XML" "Some Guide To Functional Programming")

;; first select the :book element who's title has 'XML' in it
;; from that node, get and print the author's name (text content):
(prn ($x:text "./author/name"
              ($x:node "//book[contains(@title,'XML')]" *some-xml*)))
;; "P.T. Xarnum"
</code></pre>

h2. API Reference

h3. <code>($x xpexpr doc) => (map [...])</code>

This is the main xpath application function.  It takes an xpath expression (as a string) and a document and returns a sequence of matched elements as maps.  The map contains the node's tag, attributes, text content and the dom Node itself.

<pre><code>
  { :tag    :tag-name
    :attrs  { :a "map" :of "the attributes" }
    :text   "the body content of the node and it's children"
    :node   org.w3c.dom.Node }
</code></pre>

h3. <code>($x:tag*   xpexpr doc) => [:tag-name ...]</code>
<code>($x:text* xpexpr doc) => ["the content" ..]</code>
<code>($x:attrs* xpexpr doc) => [{:the "attrs" ...} ...]</code>
<code>($x:node*  xpexpr doc) => [org.w3c.dom.Node ...]</code>

These functions apply the xpath expression to the given document and return a sequence of the requested property.

h3. <code>($x:tag?   xpexpr doc) => [:tag-name ...]</code>
<code>($x:text? xpexpr doc) => ["the content" ..]</code>
<code>($x:attrs? xpexpr doc) => [{:the "attrs" ...} ...]</code>
<code>($x:node?  xpexpr doc) => [org.w3c.dom.Node ...]</code>

These functions apply the xpath expression to the given document and return either nil or the single result found.  Unlinke the singleton forms, these do not throw and exception (just returning nil).

h3. <code>($x:tag+   xpexpr doc) => [:tag-name ...]</code>
<code>($x:text+ xpexpr doc) => ["the content" ..]</code>
<code>($x:attrs+ xpexpr doc) => [{:the "attrs" ...} ...]</code>
<code>($x:node+  xpexpr doc) => [org.w3c.dom.Node ...]</code>

These functions apply the xpath expression to the given document and return multiple results - throwing an exception if the xpath expression matches no elements.

h3. <code>($x:tag   xpexpr doc) => :tag-name</code>
<code>($x:text  xpexpr doc) => "the content"</code>
<code>($x:attrs xpexpr doc) => {:the "attrs" ...}</code>
<code>($x:node  xpexpr doc) => org.w3c.dom.Node</code>

These functions return the requested property from the single result of executing the xpath expression.  If the xpath expression identifies less than 1 result or more than 1 result in the given document, an exception is raised.

h3. <code>(xml->doc doc) => Document</code>

This function takes xml that is of one of the following types and returns a Document:  String, byte array or org.w3c.dom.Document.  In cases of repeated usage of the document (eg: executing multiple xpath expressions against the same document) this will improve performance.

h3. <code>($x:compile xpexpr) => javax.xml.xpath.XPathExpression</code>

Pre-compiles the xpath expression.  In cases of repeated execution of the xpath expression this will improve performance.

h2. Parsing and XPath Compilation

The <code>$x</code> and related functions support Strings, and in many cases, other convenient types for these arguments.  In all cases where it expects an XML Document it can be given a String, a byte array or a Document.  Where an xpath expression is expected it will take either a String or a pre-compiled XPathExpression.  The act of parsing an XML document or compiling an xpath expression is an expensive activity.  With this flexibility, clj-xpath supports the convenience of in-line usage (with String data), as well as pre-parsed and pre-compiled instances for better performance.

<pre><code>
  (let [expr (xp:compile "/*")
        doc  (xml->doc "<authors><author><name>P.T. Xarnum</name></author></authors>")]
    ($x:tag expr doc))
</code></pre>

h2. Validation

Validation now off by default.  Validation is controlled by optional parameters passed to @xml-bytes->dom@, or by overriding the atom @*validation*@ to false:

<pre><code>
  (ns your.namespace
    (:use clj-xpath.core))

  (binding [*validation* false]
    ($x:text "/this" "<this>foo</this>"))
</code></pre>


h2. XPath and XML Namespaces

To use the xpath library with an XML document that utilizes XML namespaces, you can make use of the `with-namespace-context` macro providing a map of aliases to the xmlns URL:

<pre><code>
  (def xml (slurp "fixtures/namespace1.xml"))
  (with-namespace-context {"atom" "http://www.w3.org/2005/Atom"}
    ($x:text "//atom:title" xml-doc))
  ;; => BookingCollection
</pre></code>

There is also a utility function that can pull the namespace declarations from the root node of your XML document:

<pre><code>
  (def xml (slurp "fixtures/namespace1.xml"))
  (with-namespace-context (xmlnsmap-from-root-node xml-doc)
    ($x:text "//atom:title" xml-doc))
  ;; => BookingCollection
</pre></code>

These two examples assume the following XML document:

<pre><code>
<atom:feed xml:base="http://nplhost:8042/sap/opu/sdata/IWFND/RMTSAMPLEFLIGHT/"
                  xmlns:atom="http://www.w3.org/2005/Atom"
                  xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices"
                  xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"
                  xmlns:sap="http://www.sap.com/Protocols/SAPData">

<atom:title>BookingCollection</atom:title>
<atom:updated>2012-03-19T20:27:30Z</atom:updated>

<atom:entry>
<atom:author/>
</atom:entry>

<atom:entry>
<atom:author/>
<atom:content type="application/xml"/>
</atom:entry>

</atom:feed>
</pre></code>

h3. Maven Coordinates For clj-xpath

<pre><code>
    <dependency>
      <groupId>org.clojars.kyleburton</groupId>
      <artifactId>clj-xpath</artifactId>
      <version>1.3.3</version>
    </dependency>
</code></pre>


h3. Leiningen Dependency

<pre>
  [org.clojars.kyleburton/clj-xpath "1.3.3"]
</pre>

h2. Emacs and Slime

The build creates an Emacs-lisp file in the bin directory which you can pull into your running Emacs to add it to the list of lisp implementations for SLIME.

<pre><code>
(add-to-list 'slime-lisp-implementations
             '(clj-xpath ("/Users/kburton/personal/projects/clj-xpath/target/../bin/repl")
                        :init swank-clojure-init
                        :init-function krb-swank-clojure-init) t)
</code></pre>

h2. Authors

* Kyle Burton <kyle.burton@gmail.com>
* Trotter Cashion <cashion@gmail.com>

